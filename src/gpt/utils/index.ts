import { ESKILL_LEVEL } from '../../utils/interfaces/enums';
import { IGptSettings } from '../gpt.service';

export const getSkillLevel = (level: ESKILL_LEVEL) => {
  switch (level) {
    case ESKILL_LEVEL.JUNIOR:
      return 'junior';
    case ESKILL_LEVEL.MIDDLE:
      return 'middle';
    case ESKILL_LEVEL.SENIOR:
      return 'senior';
  }
};

// $PASSED_QUESTIONS - вопросы из базы, которые пройдены пользователем, 20 штук.
// $QUESTIONS_AMOUNT - количество генерируемых вопросов
// $SKILL_LEVEL - уровень senior/junior
// $QUESTION_TECHS - внутренние технологии в направлении, через запятую HTML, React, CSS

export const defaultTestSettingsData: IGptSettings = {
  user_model: 'gpt-4o-mini',
  admin_model: 'gpt-4o-mini',
  admin_amount: 20,
  user_amount: 10,
  temperature: 1,
  system_message:
    'Ты - часть сервиса по генерации вопроса к собеседованиям на it специальности. Анализируй запрос как опытный сеньор разработчик с большим опытом проведения технических собеседований в той области, в которой тебя просят сгенерировать данные. Твоя задача генерировать разнообразные и интересные вопросы, чтобы пользователям любого уровня было интересно их проходить и в то же время они учились чему то новому проходя их. Вопросы нужно генерировать в соответствии с направлением и технологиями, которые тебе передают в вопросе. Например в вопросах для фронтенд разработчика не должно быть вопросов про базы данных или утечку памяти, он с этим не работает и не обязан это знать. Вопросы должны соответствовать уровню тестируемого. Пример хорошего вопроса для миддл - сеньор фронтенд разработчика: На чем основана реактивность во vue 3 и чем она отличается от реактивности на vue 2. Этот вопрос составлен хорошо, потому что: Он подходит по уровню собеседуемого - они должны более глубоко знать основы технологии с которой работают. Вопрос сформулирован прямо, на него можно дать только один правильный вариант ответа. Вопрос проверяет углубленные знания тестируемого, понимает ли он как работают технологии, которые он должен знать. В то же время этот вопрос плох для Джуниор разработчика. От него требуется знания основ языка программирования и основной синтаксис и умение реализовывать компоненты на своем фреймворке. Знание того, как работает фреймворк «под капотом» ему не пригодятся в реальной работе. Вот пример хороших вопросов для Джуниор фронтенд разработчика: Что вернет функция с пустым return? Или как можно проверить тип возвращаемых функцией данных? Эти вопросы хороши для Джуниор уровня, потому что они проверяют знание базы языка программирования с которым он работает. В то же время для миддл разработчику можно задать эти вопросы, но подразумевается, что он итак это знает и это не даст никакого результата. Для сеньор разработчика, он и так это знает, эти вопросы будут скучными и он их пропустит. Пользователь уже прошел эти вопросы: $PASSED_QUESTIONS. Это тоже пример хороших вопросов. Твои вопросы не должны повторять вопросы из примеров. Варианты ответов должны быть реалистичными и не слишком очевидными, чтобы проверить глубину знаний. Используй реальные кейсы. Пожалуйста, генерируй список вопросов с ответами, где для каждого ответа поле "id" должно быть целым числом больше 0. Вопросы и ответы генерируй на русском языке.',
  user_message:
    'Сгенерируй $QUESTIONS_AMOUNT вопросов для собеседования на должность $SKILL_LEVEL с 4 вариантами ответа. Вопросы должны касаться следующих технологий: $QUESTION_TECHS Должен быть один правильный ответ и 3 неправильных.',
};

export const replacePromptKeywords = (template: string, data: Record<string, string | number>): string => {
  return template.replace(/\$[A-Z_]+/g, (match) => {
    return data.hasOwnProperty(match) ? String(data[match]) : match;
  });
};

export const defaultInterviewSettingsData: IGptSettings = {
  user_model: 'gpt-4o-mini',
  admin_model: 'gpt-4o-mini',
  admin_amount: 0,
  user_amount: 0,
  temperature: 1,
  system_message:
    'Ты часть сервиса по подготовке к собеседованиям. Твоя задача провести собеседование с потенциальным кандидатом, задавать ему вопросы, которые были бы заданы на реальном собеседовании и в конце дать оценку его знаниям. Если нет истории сообщений и по сообщению пользователя нельзя понять, в каком направлении он хочет пройти собеседование, спрашивай его уточняющие вопросы, пока не поймешь, какой тип собеседования ему нужен. Не задавай несколько вопросов в одном сообщении, максимум 1-2 вопроса, подходящих по смыслу. Не спрашивай сам, что еще хотел бы обсудить пользователь. Веди собеседование самостоятельно и сам направляй пользователя в нужном направлении. Если пользователь не ответил на твой вопрос или ответил неправильно, сначала задай наводящий вопрос и если пользователь не может ответить, тогда ответь сам, посоветуй что почитать, чтобы улучшить его навыки в конце ответа спроси все ли он понял и можно ли продолжать собеседование. Если есть история сообщений, веди себя так, как будто вы уже общались, не здоровайся второй раз, просто продолжай диалог.',
  user_message: '',
};

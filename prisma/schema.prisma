// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Question {
  id           Int                    @id @default(autoincrement())
  question     String
  level        Int
  users        UserQuestionProgress[]
  saved_by_id  Int
  saved_by     User                   @relation(fields: [saved_by_id], references: [id])
  responses    Response[]
  technologies Technology[]
  QuestionTechnology       QuestionTechnology[]
}

model Technology {
  id                       Int                        @id @default(autoincrement())
  name                     String                     @unique
  description              String?                    @default("")
  specialization           Specialization[]
  questions                Question[]
  SpecializationTechnology SpecializationTechnology[]
  QuestionTechnology       QuestionTechnology[]
}

model Specialization {
  id                       Int                        @id @default(autoincrement())
  name                     String                     @unique
  technology               Technology[]
  SpecializationTechnology SpecializationTechnology[]
}

model QuestionTechnology {
  questionId   Int
  technologyId Int
  question     Question   @relation(fields: [questionId], references: [id])
  technology   Technology @relation(fields: [technologyId], references: [id])

  @@id([questionId, technologyId])
}

model SpecializationTechnology {
  specializationId Int
  technologyId     Int
  specialization   Specialization @relation(fields: [specializationId], references: [id])
  technology       Technology     @relation(fields: [technologyId], references: [id])

  @@id([specializationId, technologyId])
}

model Response {
  id          Int      @id @default(autoincrement())
  answer      String
  correct     Boolean
  question    Question @relation(fields: [question_id], references: [id], onDelete: Cascade)
  question_id Int
}

model RefreshToken {
  id         String   @id @default(uuid())
  token      String   @unique
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    Int      @unique
  expires_at DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Reviews {
  id           Int                    @id @default(autoincrement())
  created_at   DateTime               @default(now())
  text         String
  rating       Int?
  saved_by_id  Int?
  saved_by     User?                  @relation(fields: [saved_by_id], references: [id])
  ip           String?
  checked      Boolean                @default(false)
}

model User {
  id                                    Int                    @id @default(autoincrement())
  email                                 String                 @unique
  password                              String
  isGoogle                              Boolean?               @default(false)
  is_password_created                   Boolean?               @default(false)
  created_at                            DateTime               @default(now())
  updated_at                            DateTime               @updatedAt
  admin                                 Boolean                @default(false)
  username                              String?                @unique
  last_login                            DateTime?
  last_ip                               String?
  level                                 Int    @default(1)
  points                                Int    @default(0)
  questions_passed_all                  UserQuestionPassed[]
  questions_passed                      UserQuestionProgress[]
  saved_question                        Question[]
  refresh_token                         RefreshToken?
  test_reviews                          Reviews[]
  interviews                            Interview[]
  ip_log                                UserIpLog[]
  interview_files                       InterviewFiles[]
  files                                 UserFiles[]
  user_actions_log                      UserActionsLog[]
  user_service_transactions             ServiceDevelopmentSpendTransaction[]
  created_tasks                         Task[]
  user_rating                           UserRating?
  user_rating_log                       UserRatingLog[]
  user_achievements                     UserAchievement[]
  user_achievement_logs                 UserAchievementLog[]
  test_results                          TestResult[]
}

enum EUSER_FILES_TYPE {
  AVATAR
  CV
}

model UserFiles {
  id                    String   @id @default(uuid())
  filename              String
  originalName          String?
  mimetype              String
  size                  Int
  path                  String
  public                Boolean
  user_id               Int
  user                  User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  type                  EUSER_FILES_TYPE
  createdAt             DateTime @default(now())
  updatedAt             DateTime? @updatedAt
}

model UserIpLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  ip        String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId, ip])
}

model UserQuestionProgress {
  user_id     Int
  question_id Int
  passed_at   DateTime
  user        User     @relation(fields: [user_id], references: [id])
  question    Question @relation(fields: [question_id], references: [id])

  @@id([user_id, question_id])
}

model GptSettings {
  id             Int    @id @default(autoincrement())
  type           String @unique
  user_model     String
  admin_model    String
  system_message String @db.LongText
  user_message   String @db.LongText
  admin_amount   Int?
  user_amount    Int?
  temperature    Float
}

model InterviewMessages {
  id               Int                   @id @default(autoincrement())
  is_human         Boolean
  interview        Interview             @relation(fields: [interview_id], references: [id], onDelete: Cascade)
  interview_id     String
  text             String                @db.LongText
  created_at       DateTime              @default(now())
  updated_at       DateTime              @updatedAt
}

model Interview {
  id               String                 @id @default(uuid())
  created_at       DateTime               @default(now())
  updated_at       DateTime               @updatedAt
  user_prompt      String                 @db.LongText
  messages         InterviewMessages[]
  user             User                   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id          Int
  recomendations   String?                @db.LongText
  finished         Boolean                @default(false)
  success          Boolean?
  score            String?
  files            InterviewFiles[]
  user_actions_log UserActionsLog[]
}

model InterviewFiles {
  id                    String   @id @default(uuid())
  filename              String
  mimetype              String
  size                  Int
  path                  String
  public                Boolean
  user_id               Int
  user                  User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  interview_id          String
  interview             Interview @relation(fields: [interview_id], references: [id], onDelete: Cascade)
  entity_type           String
  entity_id             String
  inside_type           String
  createdAt             DateTime @default(now())
}

model SystemFile {
  id           Int      @id @default(autoincrement())
  key          String   @unique
  filename     String
  originalName String?
  path         String
  mimetype     String
  size         Int
  uploadedAt   DateTime @default(now())
}

enum EUSER_ACTION_TYPE {
  TEST
  INTERVIEW
  RESUME_CHECK
  RESUME_CREATE
}

model UserActionsLog {
  id               Int                  @id @default(autoincrement())
  createdAt        DateTime             @default(now())
  type             EUSER_ACTION_TYPE
  user_ip          String?
  interview        Interview?           @relation(fields: [interview_id], references: [id])
  user             User?                @relation(fields: [user_id], references: [id])
  user_id          Int?
  interview_id     String?
  content          String?              @db.LongText
  is_admin         Boolean?
}

enum ETASKS_STATUS {
  TODO
  DONE
}

model ServiceDevelopmentSpendTransaction {
  id                        Int                  @id @default(autoincrement())
  created_at                DateTime             @default(now())
  transaction_maker         User?                @relation(fields: [transaction_maker_id], references: [id])
  paid_time                 DateTime
  transaction_maker_id      Int?
  amount                    Float
  reason                    String?              @db.LongText
}

model Task {
  id                        String               @id @default(uuid())
  created_at                DateTime             @default(now())
  updated_at                DateTime             @updatedAt
  title                     String?              @db.LongText
  content                   String?              @db.LongText
  status                    ETASKS_STATUS        @default(TODO)
  created_by_id             Int?
  created_by                User?                @relation(fields: [created_by_id], references: [id])
}

model DaylyAdvice {
  id                        String               @id @default(uuid())
  created_at                DateTime             @default(now())
  updated_at                DateTime             @updatedAt
  advice                    String?              @db.LongText
  advice_ru                 String?              @db.LongText
  advice_en                 String?              @db.LongText
}

model Translation {
  id                        Int                  @id @default(autoincrement())
  locale                    String
  namespace                 String
  key                       String
  value                     String               @db.LongText
  createdAt                 DateTime             @default(now())
  updatedAt                 DateTime             @updatedAt

  @@unique([locale, namespace, key], name: "locale_namespace_key")
  @@index([namespace])
  @@index([locale])
}

model UserRating {
  id               Int      @id @default(autoincrement())
  user_id          Int      @unique
  user             User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  tests_rating     Int      @default(1000)
  interviews_rating Int     @default(1000)
  total_rating     Int      @default(2000)
  last_activity    DateTime @default(now())
  updated_at       DateTime @updatedAt
  created_at       DateTime @default(now())
}

model UserRatingLog {
  id         Int               @id @default(autoincrement())
  user_id    Int
  user       User              @relation(fields: [user_id], references: [id], onDelete: Cascade)
  source     EUSER_ACTION_TYPE
  /** изменение рейтинга */
  delta      Int
  /** рейтинг до изменения (по инструменту) */
  old_value  Int
  /** рейтинг после изменения (по инструменту) */
  new_value  Int
  created_at DateTime          @default(now())
  updated_at DateTime          @updatedAt
  comment    String?
}

model FakeUser {
  id                        String               @id @default(uuid())
  created_at                DateTime             @default(now())
  updated_at                DateTime             @updatedAt
  name                      String
  total_rating              Int                  @default(2000)
}

enum EACHIEVEMENT_TYPE {
  PROGRESS
  ONESHOT
}

enum EACHIEVEMENT_TRIGGER {
  /** пользователь ответил на вопрос (payload `{ count?: number } */
  ANSWER_QUESTION
  /** пользователь завершил тест (payload `{ score?: number }`) */
  PASS_TEST
  /** пользователь завершил интервью (payload `{ score?: number }`) */
  PASS_INTERVIEW
  /** регистрация */
  REGISTER
  /** вход в аккаунт */
  LOGIN
  /** установка username */
  USERNAME_SET
  /** добавление аватара */
  AVATAR_SET
  /** добавление cv */
  CV_SET
  /** добавление отзыва о тесте */
  TEST_REVIEW_CREATE
}

model AchievementImage {
  id           Int      @id @default(autoincrement())
  key          String   @unique
  filename     String
  original_name String?
  path         String
  mimetype     String
  size         Int
  uploaded_at   DateTime @default(now())
  achievement   Achievement?
}

model Achievement {
  id            Int                 @id @default(autoincrement())
  key           String              @unique // "pass_100_questions" — машинный ключ
  title         String
  description   String?             @default("")
  type          EACHIEVEMENT_TYPE
  trigger       EACHIEVEMENT_TRIGGER
  target        Int?                // для PROGRESS — целевое значение (например 100)
  reward_points Int?                @default(0) // очки, которые дает достижение
  image_id      Int?                @unique
  image         AchievementImage?   @relation(fields: [image_id], references: [id], onDelete: SetNull)
  active        Boolean             @default(true)
  created_at    DateTime            @default(now())
  updated_at    DateTime            @updatedAt

  user_progress UserAchievement[]
  logs          UserAchievementLog[]
  @@index([trigger])
}

model UserAchievement {
  id                            Int         @id @default(autoincrement())
  user_id                       Int
  achievement_id                Int
  progress                      Int         @default(0)
  completed                     Boolean     @default(false)
  completed_at                  DateTime?
  created_at                    DateTime    @default(now())
  updated_at                    DateTime    @updatedAt

  user                          User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  achievement                   Achievement @relation(fields: [achievement_id], references: [id], onDelete: Cascade)
  user_achievement_logs         UserAchievementLog[]

  @@unique([user_id, achievement_id])
  @@index([user_id])
  @@index([achievement_id])
}

model UserAchievementLog {
  id                            Int         @id @default(autoincrement())
  user_achievement_id           Int?
  user_id                       Int
  achievement_id                Int
  delta                         Int         // изменение прогресса (например +1)
  progress_after                Int
  note                          String?
  created_at                    DateTime    @default(now())

  user                          User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  achievement                   Achievement   @relation(fields: [achievement_id], references: [id], onDelete: Cascade)
  user_achievement              UserAchievement? @relation(fields: [user_achievement_id], references: [id], onDelete: Cascade)
  @@index([user_id])
  @@index([achievement_id])
}

model UserQuestionPassed {
  id           Int       @id @default(autoincrement())
  user_id      Int
  passed_at    DateTime  @default(now())
  correct      Boolean?  // правильно ли ответил

  user     User      @relation(fields: [user_id], references: [id])
}

model TestResult {
  id                            Int      @id @default(autoincrement())
  user_id                       Int
  score                         Int
  duration                      Int?
  passed_at                     DateTime @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  @@index([user_id])
  @@index([passed_at])
}
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Question {
  id           Int                    @id @default(autoincrement())
  question     String
  level        Int
  users        UserQuestionProgress[]
  saved_by_id  Int
  saved_by     User                   @relation(fields: [saved_by_id], references: [id])
  responses    Response[]
  technologies Technology[]
  QuestionTechnology       QuestionTechnology[]
}

model Technology {
  id                       Int                        @id @default(autoincrement())
  name                     String                     @unique
  description              String?                    @default("")
  specialization           Specialization[]
  questions                Question[]
  SpecializationTechnology SpecializationTechnology[]
  QuestionTechnology       QuestionTechnology[]
}

model Specialization {
  id                       Int                        @id @default(autoincrement())
  name                     String                     @unique
  technology               Technology[]
  SpecializationTechnology SpecializationTechnology[]
}

model QuestionTechnology {
  questionId   Int
  technologyId Int
  question     Question   @relation(fields: [questionId], references: [id])
  technology   Technology @relation(fields: [technologyId], references: [id])

  @@id([questionId, technologyId])
}

model SpecializationTechnology {
  specializationId Int
  technologyId     Int
  specialization   Specialization @relation(fields: [specializationId], references: [id])
  technology       Technology     @relation(fields: [technologyId], references: [id])

  @@id([specializationId, technologyId])
}

model Response {
  id          Int      @id @default(autoincrement())
  answer      String
  correct     Boolean
  question    Question @relation(fields: [question_id], references: [id], onDelete: Cascade)
  question_id Int
}

model RefreshToken {
  id         String   @id @default(uuid())
  token      String   @unique
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    Int      @unique
  expires_at DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Reviews {
  id           Int                    @id @default(autoincrement())
  created_at   DateTime               @default(now())
  text         String
  rating       Int?
  saved_by_id  Int?
  saved_by     User?                  @relation(fields: [saved_by_id], references: [id])
  ip           String?
  checked      Boolean                @default(false)
}

model User {
  id                                    Int                    @id @default(autoincrement())
  email                                 String                 @unique
  password                              String
  created_at                            DateTime               @default(now())
  updated_at                            DateTime               @updatedAt
  admin                                 Boolean                @default(false)
  username                              String?                @unique
  questions_passed                      UserQuestionProgress[]
  saved_question                        Question[]
  refresh_token                         RefreshToken?
  test_reviews                          Reviews[]
  interviews                            Interview[]
  last_login                            DateTime?
  last_ip                               String?
  ip_log                                UserIpLog[]
  interview_files                       InterviewFiles[]
  files                                 UserFiles[]
  user_actions_log                      UserActionsLog[]
  user_service_transactions             ServiceDevelopmentSpendTransaction[]
}

enum EUSER_FILES_TYPE {
  AVATAR
  CV
}

model UserFiles {
  id                    String   @id @default(uuid())
  filename              String
  originalName          String?
  mimetype              String
  size                  Int
  path                  String
  public                Boolean
  user_id               Int
  user                  User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  type                  EUSER_FILES_TYPE
  createdAt             DateTime @default(now())
  updatedAt             DateTime? @updatedAt
}

model UserIpLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  ip        String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId, ip])
}

model UserQuestionProgress {
  user_id     Int
  question_id Int
  passed_at   DateTime
  user        User     @relation(fields: [user_id], references: [id])
  question    Question @relation(fields: [question_id], references: [id])

  @@id([user_id, question_id])
}

model GptSettings {
  id             Int    @id @default(autoincrement())
  type           String @unique
  user_model     String
  admin_model    String
  system_message String @db.LongText
  user_message   String @db.LongText
  admin_amount   Int?
  user_amount    Int?
  temperature    Float
}

model InterviewMessages {
  id               Int                   @id @default(autoincrement())
  is_human         Boolean
  interview        Interview             @relation(fields: [interview_id], references: [id], onDelete: Cascade)
  interview_id     String
  text             String                @db.LongText
  created_at       DateTime              @default(now())
  updated_at       DateTime              @updatedAt
}

model Interview {
  id               String                 @id @default(uuid())
  created_at       DateTime               @default(now())
  updated_at       DateTime               @updatedAt
  user_prompt      String                 @db.LongText
  messages         InterviewMessages[]
  user             User                   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id          Int
  recomendations   String?                @db.LongText
  finished         Boolean                @default(false)
  success          Boolean?
  score            String?
  files            InterviewFiles[]
  user_actions_log UserActionsLog[]
}

model InterviewFiles {
  id                    String   @id @default(uuid())
  filename              String
  mimetype              String
  size                  Int
  path                  String
  public                Boolean
  user_id               Int
  user                  User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  interview_id          String
  interview             Interview @relation(fields: [interview_id], references: [id], onDelete: Cascade)
  entity_type           String
  entity_id             String
  inside_type           String
  createdAt             DateTime @default(now())
}

model SystemFile {
  id           Int      @id @default(autoincrement())
  key          String   @unique
  filename     String
  originalName String?
  path         String
  mimetype     String
  size         Int
  uploadedAt   DateTime @default(now())
}

enum EUSER_ACTION_TYPE {
  TEST
  INTERVIEW
  RESUME_CHECK
  RESUME_CREATE
}

model UserActionsLog {
  id               Int                  @id @default(autoincrement())
  createdAt        DateTime             @default(now())
  type             EUSER_ACTION_TYPE
  user_ip          String?
  interview        Interview?           @relation(fields: [interview_id], references: [id])
  user             User?                @relation(fields: [user_id], references: [id])
  user_id          Int?
  interview_id     String?
  content          String?              @db.LongText
  is_admin         Boolean?
}

model ServiceDevelopmentSpendTransaction {
  id                        Int                  @id @default(autoincrement())
  created_at                DateTime             @default(now())
  transaction_maker         User?                @relation(fields: [transaction_maker_id], references: [id])
  paid_time                 DateTime
  transaction_maker_id      Int?
  amount                    Float
  reason                    String?              @db.LongText
}
